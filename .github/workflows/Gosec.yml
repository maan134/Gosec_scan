name: Gosec SARIF Scan

on:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  security-events: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:

      # 1️⃣ Checkout the repo
      - name: Checkout Source
        uses: actions/checkout@v3

      # 2️⃣ Set up correct Go version (>= 1.21.6)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.6'
      - name: Verify Go version
        run: go version
      - name: Go Mod Tidy
        run: go mod tidy

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-no-fail -verbose -fmt sarif -out results.sarif .'
      #- name: Upload SARIF file
       # uses: github/codeql-action/upload-sarif@v3
        #with:
          # Path to SARIF file relative to the root of the repository
         # sarif_file: results.sarif
        # 9️⃣ Upload GoSec SARIF as artifact
      - name: Upload GoSec Report
        uses: actions/upload-artifact@v4
        with:
          name: GoSec report
          path: results.sarif
          
      # 4️⃣ Optional: Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
      

      # 6️⃣ Run Trivy filesystem scan (SARIF)
      - name: Run Trivy filesystem scan
        run: |
          trivy fs --format sarif --output trivy-results.sarif .
          echo "Trivy SARIF written to trivy-results.sarif"

      # 7️⃣ Upload Trivy report
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: Trivy report
          path: trivy-results.sarif

    
